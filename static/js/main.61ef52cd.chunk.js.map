{"version":3,"sources":["components/Button.js","components/Field.js","components/GeneralInfo.js","components/EducationBlock.js","components/EducationInfo.js","components/ExperienceBlock.js","components/Experience.js","App.js","index.js"],"names":["Button","props","task","label","onClick","Field","sendData","bind","e","this","callback","field","target","value","edit","placeholder","val","charAt","toUpperCase","slice","className","type","onChange","Component","GeneralInfo","updateInfo","state","name","email","phone","key","newInfo","setState","EducationBlock","updateEducation","deleteSelf","id","category","update","delete","school","major","graduated","EducationInfo","addNewEducationBlock","removeEducationBlock","updateEducationData","educationBlockIds","data","createEmptyEducationData","newState","i","length","newData","stateUpdate","updateIndex","findDataIndex","removeIndex","splice","educationInfo","push","ExperienceBlock","updateExperience","title","company","tasks","start","end","Experience","addNewExperienceBlock","removeExperienceBlock","updateExperienceData","experienceBlockIds","createEmptyExperienceData","experience","App","toggleMode","newEdit","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.61ef52cd.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport './style/Button.css'\r\n\r\nconst Button = (props) => {\r\n    const task = props.task\r\n    const label = props.label\r\n    return (\r\n        <button onClick={task}>{label}</button>\r\n    )\r\n}\r\n\r\nButton.propTypes = {\r\n    task: PropTypes.func,\r\n    label: PropTypes.string\r\n}\r\n\r\nexport default Button","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport './style/Field.css'\r\n\r\nclass Field extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.sendData = this.sendData.bind(this)\r\n    }\r\n\r\n    sendData(e) {\r\n        this.props.callback(this.props.field, e.target.value)\r\n    }\r\n    \r\n    render() {\r\n        const { field, edit, placeholder, val } = this.props\r\n        const label = field.charAt(0).toUpperCase() + field.slice(1) + ': '\r\n        return (\r\n            <div className='field-container'>\r\n                <div className='label-container'>\r\n                    {label}\r\n                </div>\r\n                {edit\r\n                    ?   <input\r\n                            className='field-edit'\r\n                            type='text'\r\n                            placeholder={placeholder}\r\n                            value={val}\r\n                            onChange={(e) => this.sendData(e)}\r\n                        />\r\n                    :   <div className='field-preview'>{val}</div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nField.propTypes = {\r\n    field: PropTypes.string,\r\n    cb: PropTypes.func,\r\n    edit: PropTypes.bool,\r\n    placeholder: PropTypes.string\r\n}\r\n\r\nexport default Field","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Field from './Field'\r\nimport './style/GeneralInfo.css'\r\n\r\nclass GeneralInfo extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.updateInfo = this.updateInfo.bind(this)\r\n        this.state = {\r\n            name: '',\r\n            email: '',\r\n            phone: ''\r\n        }\r\n    }\r\n\r\n    updateInfo(key, newInfo) {\r\n        this.setState({\r\n            [key]: newInfo\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { edit } = this.props\r\n        const { name, email, phone } = this.state\r\n        return(\r\n\t\t\t<div className = 'general-info'>\r\n                <div className = 'general-name'>\r\n                    <Field\r\n                        field = 'name' \r\n                        val = {name}\r\n                        callback = {this.updateInfo}\r\n                        edit = {edit}\r\n                        placeholder = 'John Smith'\r\n                    />\r\n                </div>\r\n                <div className = 'general-email'>\r\n                    <Field\r\n                        field = 'email'\r\n                        val = {email}\r\n                        callback = {this.updateInfo}\r\n                        edit = {edit}\r\n                        placeholder = 'johnsmith@email.com'\r\n                    />\r\n                </div>\r\n                <div className = 'general-phone'>\r\n                    <Field\r\n                        field = 'phone'\r\n                        val = {phone}\r\n                        callback = {this.updateInfo}\r\n                        edit = {edit}\r\n                        placeholder = '0123 456 789'\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nGeneralInfo.propTypes = {\r\n    edit: PropTypes.bool\r\n}\r\n\r\nexport default GeneralInfo","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Field from './Field'\r\nimport Button from './Button'\r\nimport './style/EducationBlock.css'\r\n\r\nclass EducationBlock extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.updateEducation = this.updateEducation.bind(this)\r\n        this.deleteSelf = this.deleteSelf.bind(this)\r\n        this.state = {\r\n            id: this.props.id\r\n        }\r\n    }\r\n\r\n    updateEducation(category, newInfo) {\r\n        this.props.update(this.state.id, category, newInfo)\r\n    }\r\n\r\n    deleteSelf() {\r\n        this.props.delete(this.props.id)\r\n    }\r\n\r\n    render() {\r\n        const { edit, school, major, graduated } = this.props\r\n        return(\r\n            <div className='education-block'>\r\n                <div className='edu-content'>\r\n                    <div className='school-wrapper'>\r\n                        <Field \r\n                            field = 'school' \r\n                            val = { school }\r\n                            callback = {this.updateEducation}\r\n                            edit = { edit }\r\n                            placeholder = 'RMIT University'\r\n                        />\r\n                    </div>\r\n                    <div className='major-wrapper'>\r\n                        <Field \r\n                            field = 'major' \r\n                            val = { major }\r\n                            callback = {this.updateEducation}\r\n                            edit = { edit }\r\n                            placeholder = 'Linguistics'\r\n                        />\r\n                    </div>\r\n                    <div className='graduated-wrapper'>\r\n                        <Field \r\n                            field = 'graduated' \r\n                            val = { graduated }\r\n                            callback = {this.updateEducation}\r\n                            edit = { edit }\r\n                            placeholder = '2012'\r\n                        />\r\n                    </div>\r\n                </div>\r\n                {edit && \r\n                    <div className='remove-button'>\r\n                        <div className='edu-button-wrapper'>\r\n                            <Button task = {this.deleteSelf} label = 'Remove' /> \r\n                        </div>\r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nEducationBlock.propTypes = {\r\n    edit: PropTypes.bool,\r\n    delete: PropTypes.func,\r\n    update: PropTypes.func,\r\n    id: PropTypes.number,\r\n    school: PropTypes.string,\r\n    major: PropTypes.string,\r\n    graduated: PropTypes.string\r\n}\r\n\r\nexport default EducationBlock","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Button from './Button'\r\nimport EducationBlock from './EducationBlock'\r\nimport './style/EducationInfo.css'\r\n\r\nclass EducationInfo extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.addNewEducationBlock = this.addNewEducationBlock.bind(this)\r\n        this.removeEducationBlock = this.removeEducationBlock.bind(this)\r\n        this.updateEducationData = this.updateEducationData.bind(this)\r\n        this.state = {\r\n            educationBlockIds: 1,\r\n            data: []\r\n        }\r\n    }\r\n\r\n    addNewEducationBlock() {\r\n        this.setState({\r\n            educationBlockIds: this.state.educationBlockIds + 1,\r\n            data: [...this.state.data, this.createEmptyEducationData()]\r\n        })\r\n    }\r\n\r\n    createEmptyEducationData() {\r\n        return {\r\n            id: this.state.educationBlockIds,\r\n            school: '',\r\n            major: '',\r\n            graduated: ''\r\n        }\r\n    }\r\n\r\n    findDataIndex(newState, id) {\r\n        for (let i = 0; i < newState.length; i++) {\r\n            if (newState[i].id === id) {\r\n                return i\r\n            }\r\n        }\r\n    }\r\n\r\n    updateEducationData(id, category, newData) {\r\n        const stateUpdate = this.state.data\r\n        const updateIndex = this.findDataIndex(stateUpdate, id)\r\n        stateUpdate[updateIndex] = {\r\n            ...stateUpdate[updateIndex],\r\n            [category]: newData\r\n        }\r\n        this.setState({\r\n            data: stateUpdate\r\n        })\r\n    }\r\n\r\n    removeEducationBlock(id) {\r\n        const stateUpdate = this.state.data\r\n        const removeIndex = this.findDataIndex(stateUpdate, id)\r\n        stateUpdate.splice(removeIndex, 1)\r\n        this.setState({\r\n            data: stateUpdate\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { edit } = this.props\r\n        const data = this.state.data\r\n        let educationInfo = []\r\n        for (let i = 0; i < data.length; i++) {\r\n            const { id, school, major, graduated } = data[i]\r\n            educationInfo.push(\r\n                <EducationBlock\r\n                    key = { i }\r\n                    edit = { edit }\r\n                    delete = {this.removeEducationBlock}\r\n                    update = {this.updateEducationData}\r\n                    id = { id }\r\n                    school = { school }\r\n                    major = { major }\r\n                    graduated = { graduated }\r\n                />\r\n            )\r\n        }\r\n\r\n        return( \r\n\t\t\t<div className = 'education-info'>\r\n                {educationInfo}\r\n                {edit && \r\n                    <div className='add-education-wrapper'>\r\n                        <div className='add-education'>\r\n                            <Button task={this.addNewEducationBlock} label='Add Education' />\r\n                        </div>\r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nEducationInfo.propTypes = {\r\n    edit: PropTypes.bool\r\n}\r\n\r\nexport default EducationInfo","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Field from './Field'\r\nimport Button from './Button'\r\nimport './style/ExperienceBlock.css'\r\n\r\nclass ExperienceBlock extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.updateExperience = this.updateExperience.bind(this)\r\n        this.deleteSelf = this.deleteSelf.bind(this)\r\n        this.state = {\r\n            id: this.props.id\r\n        }\r\n    }\r\n\r\n    updateExperience(category, newInfo) {\r\n        this.props.update(this.state.id, category, newInfo)\r\n    }\r\n\r\n    deleteSelf() {\r\n        this.props.delete(this.props.id)\r\n    }\r\n\r\n    render() {\r\n        const { edit, title, company, tasks, start, end } = this.props\r\n        return(\r\n            <div className='experience-block'>\r\n                <div className='exp-content'>\r\n                    <div className='information-group'>\r\n                        <div className='title-wrapper'>\r\n                            <Field \r\n                                field = 'title' \r\n                                val = { title }\r\n                                callback = {this.updateExperience}\r\n                                edit = { edit }\r\n                                placeholder = 'CEO'\r\n                            />\r\n                        </div>\r\n                        <div className='company-wrapper'>\r\n                            <Field \r\n                                field = 'company' \r\n                                val = { company }\r\n                                callback = {this.updateExperience}\r\n                                edit = { edit }\r\n                                placeholder = 'Amazon'\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className='information-group'>\r\n                        <div className='start-wrapper'>\r\n                            <Field \r\n                                field = 'start' \r\n                                val = { start }\r\n                                callback = {this.updateExperience}\r\n                                edit = { edit }\r\n                                placeholder = '2017'\r\n                            />\r\n                        </div>\r\n                        <div className='end-wrapper'>\r\n                            <Field \r\n                                field = 'end' \r\n                                val = { end }\r\n                                callback = {this.updateExperience}\r\n                                edit = { edit }\r\n                                placeholder = '2020'\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className='tasks-wrapper'>\r\n                        <Field \r\n                            field = 'tasks' \r\n                            val = { tasks }\r\n                            callback = {this.updateExperience}\r\n                            edit = { edit }\r\n                            placeholder = 'Swimming in a pool filled with cash'\r\n                        />\r\n                    </div>\r\n                </div>\r\n                {edit && \r\n                    <div className='exp-remove-button'>\r\n                        <div className='exp-button-wrapper'>\r\n                            <Button task = {this.deleteSelf} label = 'Remove' /> \r\n                        </div>\r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nExperienceBlock.propTypes = {\r\n    edit: PropTypes.bool,\r\n    delete: PropTypes.func,\r\n    update: PropTypes.func,\r\n    id: PropTypes.number,\r\n    school: PropTypes.string,\r\n    major: PropTypes.string,\r\n    graduated: PropTypes.string\r\n}\r\n\r\nexport default ExperienceBlock","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Button from './Button'\r\nimport ExperienceBlock from './ExperienceBlock'\r\nimport './style/Experience.css'\r\n\r\nclass Experience extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.addNewExperienceBlock = this.addNewExperienceBlock.bind(this)\r\n        this.removeExperienceBlock = this.removeExperienceBlock.bind(this)\r\n        this.updateExperienceData = this.updateExperienceData.bind(this)\r\n        this.state = {\r\n            experienceBlockIds: 1,\r\n            data: []\r\n        }\r\n    }\r\n\r\n    addNewExperienceBlock() {\r\n        this.setState({\r\n            experienceBlockIds: this.state.experienceBlockIds + 1,\r\n            data: [...this.state.data, this.createEmptyExperienceData()]\r\n        })\r\n    }\r\n\r\n    createEmptyExperienceData() {\r\n        return {\r\n            id: this.state.experienceBlockIds,\r\n            title: '',\r\n            company: '',\r\n            tasks: '',\r\n            start: '',\r\n            end: ''\r\n        }\r\n    }\r\n\r\n    findDataIndex(newState, id) {\r\n        for (let i = 0; i < newState.length; i++) {\r\n            if (newState[i].id === id) {\r\n                return i\r\n            }\r\n        }\r\n    }\r\n\r\n    updateExperienceData(id, category, newData) {\r\n        const stateUpdate = this.state.data\r\n        const updateIndex = this.findDataIndex(stateUpdate, id)\r\n        stateUpdate[updateIndex] = {\r\n            ...stateUpdate[updateIndex],\r\n            [category]: newData\r\n        }\r\n        this.setState({\r\n            data: stateUpdate\r\n        })\r\n    }\r\n\r\n    removeExperienceBlock(id) {\r\n        const stateUpdate = this.state.data\r\n        const removeIndex = this.findDataIndex(stateUpdate, id)\r\n        stateUpdate.splice(removeIndex, 1)\r\n        this.setState({\r\n            data: stateUpdate\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { edit } = this.props\r\n        const data = this.state.data\r\n        let experience = []\r\n        for (let i = 0; i < data.length; i++) {\r\n            const { id, title, company, tasks, start, end } = data[i]\r\n            experience.push(\r\n                <ExperienceBlock\r\n                    key = { i }\r\n                    edit = { edit }\r\n                    delete = {this.removeExperienceBlock}\r\n                    update = {this.updateExperienceData}\r\n                    id = { id }\r\n                    title = { title }\r\n                    company = { company }\r\n                    tasks = { tasks }\r\n                    start = { start }\r\n                    end = { end }\r\n                />\r\n            )\r\n        }\r\n\r\n        return( \r\n\t\t\t<div className = 'experience'>\r\n                {experience}\r\n                {edit && \r\n                    <div className='add-experience-wrapper'>\r\n                        <div className='add-experience'>\r\n                            <Button task={this.addNewExperienceBlock} label='Add Experience' />\r\n                        </div>\r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nExperience.propTypes = {\r\n    edit: PropTypes.bool\r\n}\r\n\r\nexport default Experience","import './App.css'\nimport React, { Component } from 'react'\nimport Button from './components/Button'\nimport GeneralInfo from './components/GeneralInfo'\nimport EducationInfo from './components/EducationInfo'\nimport Experience from './components/Experience'\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.toggleMode = this.toggleMode.bind(this)\n\t\tthis.state = {\n\t\t\tedit: true\n\t\t}\n\t}\n\n\ttoggleMode() {\n\t\tconst newEdit = !this.state.edit\n\t\tthis.setState({\n\t\t\tedit: newEdit\n\t\t})\n\t}\n\n\trender() {\n        const { edit } = this.state\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<div className='page-content'>\n\t\t\t\t\t{edit\n\t\t\t\t\t\t?\t<div className='toggle-wrapper'>\n\t\t\t\t\t\t\t\t<Button task={this.toggleMode} label='Edit Mode' />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t:\t<div className='toggle-wrapper'>\n\t\t\t\t\t\t\t\t<Button task={this.toggleMode} label='Preview Mode' />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t}\n                \t<h3>PERSONAL INFORMATION</h3>\n\t\t\t\t\t<GeneralInfo edit={edit} />\n                \t<h3>EDUCATION</h3>\n\t\t\t\t\t<EducationInfo edit={edit} />\n\t\t\t\t\t<h3>EXPERIENCE</h3>\n\t\t\t\t\t<Experience edit={edit} />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}